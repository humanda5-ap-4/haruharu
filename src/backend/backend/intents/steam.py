#Î¨¥Î£åÍ≤åÏûÑ ÎèôÏûëx -> ÏàòÏ†ï

from sqlalchemy import text
import re
from common.response import generate_response
from db import engine_db

# üî∑ SQL ÌîÑÎ°¨ÌîÑÌä∏ ÌÖúÌîåÎ¶ø (LLMÏóê Ï†ÑÎã¨)
SQL_PROMPT_TEMPLATE = """
[Ïä§ÌåÄ Í≤åÏûÑ SQL ÏÉùÏÑ±Í∏∞]

ÏÇ¨Ïö©ÏûêÏùò ÏöîÏ≤≠ÏùÑ Í∏∞Î∞òÏúºÎ°ú SQLÏùÑ ÏÉùÏÑ±ÌïòÏÑ∏Ïöî. ÏïÑÎûò Í∑úÏπôÏùÑ Î∞òÎìúÏãú Îî∞Î•¥ÏÑ∏Ïöî.

[Í∑úÏπô]
- Î∞òÎìúÏãú SELECT Î¨∏Îßå Ï∂úÎ†•ÌïòÏÑ∏Ïöî. ÏÑ§Î™Ö, Îî∞Ïò¥Ìëú, Î∞±Ìã±, ÏΩîÎìúÎ∏îÎü≠ÏùÄ Ìè¨Ìï®ÌïòÏßÄ ÎßàÏÑ∏Ïöî.
- Ïª¨ÎüºÏùÄ steam_discountedgames ÌÖåÏù¥Î∏îÏùò Ïª¨ÎüºÎßå ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî:
  game_name, game_genre, start_date, game_price, discount_rate, discounted_price
- Ìï†Ïù∏ Ï°∞Í±¥Ïù¥ Î™ÖÏãúÎêòÏßÄ ÏïäÏúºÎ©¥ discount_rate > 0 Ï°∞Í±¥ÏùÑ Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî.
- Í∞ÄÍ≤© Ï°∞Í±¥Ïù¥ ÏóÜÏúºÎ©¥ ÏÉÅÏúÑ Ìï†Ïù∏ÏàúÏúºÎ°ú Ï†ïÎ†¨ÌïòÏÑ∏Ïöî.
- limitÏù¥ Î™ÖÏãúÎêòÏßÄ ÏïäÏúºÎ©¥ LIMIT 5Î•º Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî.
- "Î¨¥Î£å" ÎòêÎäî "0Ïõê" ÏöîÏ≤≠Ïù¥ Ìè¨Ìï®ÎêòÎ©¥ Free Ï°∞Í±¥ÏùÑ Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî.
[ÏûÖÎ†•]
{query}

[Ï∂úÎ†•]
"""

# üî∑ Ï∂îÏ≤ú ÏöîÏïΩ ÌîÑÎ°¨ÌîÑÌä∏
RECOMMEND_PROMPT_TEMPLATE = """
Ìï†Ïù∏ Ï§ëÏù∏ Ïä§ÌåÄ Í≤åÏûÑ Ï∂îÏ≤ú Î¶¨Ïä§Ìä∏ÏûÖÎãàÎã§:

{game_list}

ÏúÑ Í≤åÏûÑÎì§ÏùÑ 2~3Î¨∏Ïû•ÏúºÎ°ú ÏöîÏïΩÌï¥ ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏûêÏó∞Ïä§ÎüΩÍ≤å Ï∂îÏ≤úÌï¥ Ï£ºÏÑ∏Ïöî.
"""

# üéØ Î©îÏù∏ Ìï∏Îì§Îü¨
def handle(query: str, entities: list) -> str:
    #return "[BOT] steam intent ÏùëÎãµ ÌÖåÏä§Ìä∏"
    sql = generate_sql(query)

    if not sql.lower().startswith("select"):
        return f"[ERROR] ÏûòÎ™ªÎêú SQL ÏùëÎãµÏûÖÎãàÎã§:\n{sql}"

    with engine_db.connect() as conn:
        try:
            result = conn.execute(text(sql)).mappings().fetchall()
            rows = [dict(r) for r in result]

            if not rows:
                return "[BOT] Ï°∞Í±¥Ïóê ÎßûÎäî Ìï†Ïù∏ Í≤åÏûÑÏù¥ ÏóÜÏäµÎãàÎã§."

            list_text = "\n".join(
                f"- {r['game_name']} ({r['discount_rate']}% Ìï†Ïù∏ ‚Üí ${r['discounted_price']})"
                for r in rows
            )
            summary = generate_summary(rows)
            return f"{list_text}\n\n[BOT Ï∂îÏ≤ú ÏöîÏïΩ]\n{summary}"
        except Exception as e:
            return f"[ERROR] SQL Ïã§Ìñâ Ïã§Ìå®: {e}"

# üîß LLM Í∏∞Î∞ò SQL ÏÉùÏÑ± Ìï®Ïàò
def generate_sql(query: str) -> str:
    prompt = SQL_PROMPT_TEMPLATE.format(query=query)
    sql = generate_response(prompt).strip()
    sql = re.sub(r"```sql|```", "", sql).strip().strip(";")

    # Î≥¥Ïïà ÌïÑÌÑ∞ÎßÅ (ÌïÑÏöîÏãú)
    allowed_columns = {"game_name", "game_genre", "start_date", "game_price", "discount_rate", "discounted_price"}
    used_columns = set(re.findall(r"game_\w+", sql))
    if used_columns - allowed_columns:
        return "SELECT game_name, discounted_price FROM steam_games WHERE discount_rate > 0 ORDER BY discount_rate DESC LIMIT 5"

    if "limit" not in sql.lower():
        sql += " LIMIT 5"

    return sql

# üìù Ï∂îÏ≤ú ÏöîÏïΩ Î¨∏Ïû• ÏÉùÏÑ±
def generate_summary(rows: list) -> str:
    bullets = "\n".join(
        f"- {r['game_name']} (${r['discounted_price']}, {r['discount_rate']}% Ìï†Ïù∏)"
        for r in rows
    )
    prompt = RECOMMEND_PROMPT_TEMPLATE.format(game_list=bullets)
    return generate_response(prompt.strip())
